// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id                 String                   @id
  email              String                   @unique
  username           String                   @unique
  hashedPassword     String
  emailVerified      Boolean                  @default(false)
  name               String?
  sessions           Session[]
  VerificationToken  EmailVerificationToken[]
  Design             Design[]
  PasswordResetToken PasswordResetToken[]
  Order              Order[]
  Collection         Collection[]
  Vendor             Vendor?
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordResetToken {
  hashedToken String   @id @unique
  userId      String
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
}

model EmailVerificationToken {
  hashedToken String   @id @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([userId])
}

model Design {
  id               String  @id
  name             String  @default("Untitled")
  isDraft          Boolean @default(true)
  isUploadComplete Boolean @default(false)

  // should be different than id for security purposes
  originalFileStorageKey String @unique
  originalFileName       String
  originalFileType       String @default("image/tiff")

  // key will be based on the id of Design
  thumbnailFileStorageKey String? @unique
  thumbnailFileType       String? @default("image/webp")

  metadata Json?
  tags     String[]

  // price is stored in the smallest unit of the currency
  price    Int    @default(290)
  currency String @default("INR")

  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  Order      Order[]
  Collection Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model Vendor {
  id            Int     @id @default(autoincrement())
  name          String
  phone         String  @unique
  status        String
  UPI           UPI[]
  KYC           KYC?
  Order         Order[]
  totalEarnings Int     @default(0)
  userId        String  @unique
  user          User    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UPI {
  id            Int    @id @default(autoincrement())
  vpa           String @unique
  accountHolder String
  vendorId      Int    @unique
  vendor        Vendor @relation(references: [id], fields: [vendorId], onDelete: Cascade)

  @@index([vendorId])
}

model KYC {
  id  Int    @id @default(autoincrement())
  pan String @unique

  vendorId Int    @unique
  vendor   Vendor @relation(references: [id], fields: [vendorId], onDelete: Cascade)

  @@index([vendorId])
}

model Order {
  id                      Int       @id @default(autoincrement())
  designs                 Design[]
  userId                  String
  user                    User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  vendorId                Int
  vendor                  Vendor    @relation(references: [id], fields: [vendorId], onDelete: Cascade)
  status                  String // ACTIVE, PAID, EXPIRED
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  // TODO: change to amount
  price                   Int
  paymentSessionId        String?
  cashFreeOrderId         String?
  percentageSplitToVendor Int?
  orderExpiryTime         DateTime?
  bankReference           String?
  cashFreePaymentId       String?
  paymentFailed           Boolean   @default(false)
  failedReason            String?

  @@index([userId])
  @@index([vendorId])
}

model Collection {
  id        Int      @id @default(autoincrement())
  name      String
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  designs   Design[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
